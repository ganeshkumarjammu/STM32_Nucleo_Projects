
Using_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003278  08003278  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003280  08003280  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003280  08003280  00013280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003284  08003284  00013284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000001c  080032a4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  080032a4  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b30a  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a7a  00000000  00000000  0002b399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a48  00000000  00000000  0002ce18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080b  00000000  00000000  0002d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ab0  00000000  00000000  0002e06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5c9  00000000  00000000  0004eb1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c70b2  00000000  00000000  0005c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ac0  00000000  00000000  00123198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00125c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080031a0 	.word	0x080031a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	080031a0 	.word	0x080031a0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800050a:	4a38      	ldr	r2, [pc, #224]	; (80005ec <HD44780_Init+0xec>)
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000510:	4b37      	ldr	r3, [pc, #220]	; (80005f0 <HD44780_Init+0xf0>)
 8000512:	2208      	movs	r2, #8
 8000514:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000516:	4b37      	ldr	r3, [pc, #220]	; (80005f4 <HD44780_Init+0xf4>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800051c:	4b33      	ldr	r3, [pc, #204]	; (80005ec <HD44780_Init+0xec>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d907      	bls.n	8000534 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000524:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <HD44780_Init+0xf4>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	f043 0308 	orr.w	r3, r3, #8
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <HD44780_Init+0xf4>)
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e006      	b.n	8000542 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000534:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <HD44780_Init+0xf4>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <HD44780_Init+0xf4>)
 8000540:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000542:	f000 fa13 	bl	800096c <DelayInit>
  HAL_Delay(50);
 8000546:	2032      	movs	r0, #50	; 0x32
 8000548:	f000 fdf4 	bl	8001134 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <HD44780_Init+0xf0>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f9d1 	bl	80008f8 <ExpanderWrite>
  HAL_Delay(1000);
 8000556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800055a:	f000 fdeb 	bl	8001134 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800055e:	2030      	movs	r0, #48	; 0x30
 8000560:	f000 f9b9 	bl	80008d6 <Write4Bits>
  DelayUS(4500);
 8000564:	f241 1094 	movw	r0, #4500	; 0x1194
 8000568:	f000 fa2a 	bl	80009c0 <DelayUS>

  Write4Bits(0x03 << 4);
 800056c:	2030      	movs	r0, #48	; 0x30
 800056e:	f000 f9b2 	bl	80008d6 <Write4Bits>
  DelayUS(4500);
 8000572:	f241 1094 	movw	r0, #4500	; 0x1194
 8000576:	f000 fa23 	bl	80009c0 <DelayUS>

  Write4Bits(0x03 << 4);
 800057a:	2030      	movs	r0, #48	; 0x30
 800057c:	f000 f9ab 	bl	80008d6 <Write4Bits>
  DelayUS(4500);
 8000580:	f241 1094 	movw	r0, #4500	; 0x1194
 8000584:	f000 fa1c 	bl	80009c0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000588:	2020      	movs	r0, #32
 800058a:	f000 f9a4 	bl	80008d6 <Write4Bits>
  DelayUS(100);
 800058e:	2064      	movs	r0, #100	; 0x64
 8000590:	f000 fa16 	bl	80009c0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HD44780_Init+0xf4>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f043 0320 	orr.w	r3, r3, #32
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f95c 	bl	800085c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HD44780_Init+0xf8>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80005aa:	f000 f88b 	bl	80006c4 <HD44780_Display>
  HD44780_Clear();
 80005ae:	f000 f82b 	bl	8000608 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HD44780_Init+0xfc>)
 80005b4:	2202      	movs	r2, #2
 80005b6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <HD44780_Init+0xfc>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f94a 	bl	800085c <SendCommand>
  DelayUS(4500);
 80005c8:	f241 1094 	movw	r0, #4500	; 0x1194
 80005cc:	f000 f9f8 	bl	80009c0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005d0:	490b      	ldr	r1, [pc, #44]	; (8000600 <HD44780_Init+0x100>)
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 f8eb 	bl	80007ae <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005d8:	490a      	ldr	r1, [pc, #40]	; (8000604 <HD44780_Init+0x104>)
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 f8e7 	bl	80007ae <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005e0:	f000 f81d 	bl	800061e <HD44780_Home>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	2000003b 	.word	0x2000003b
 80005f0:	2000003c 	.word	0x2000003c
 80005f4:	20000038 	.word	0x20000038
 80005f8:	20000039 	.word	0x20000039
 80005fc:	2000003a 	.word	0x2000003a
 8000600:	20000000 	.word	0x20000000
 8000604:	20000008 	.word	0x20000008

08000608 <HD44780_Clear>:

void HD44780_Clear()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800060c:	2001      	movs	r0, #1
 800060e:	f000 f925 	bl	800085c <SendCommand>
  DelayUS(2000);
 8000612:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000616:	f000 f9d3 	bl	80009c0 <DelayUS>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}

0800061e <HD44780_Home>:

void HD44780_Home()
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000622:	2002      	movs	r0, #2
 8000624:	f000 f91a 	bl	800085c <SendCommand>
  DelayUS(2000);
 8000628:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800062c:	f000 f9c8 	bl	80009c0 <DelayUS>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b087      	sub	sp, #28
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	460a      	mov	r2, r1
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	4613      	mov	r3, r2
 8000642:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HD44780_SetCursor+0x5c>)
 8000646:	f107 0408 	add.w	r4, r7, #8
 800064a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800064c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <HD44780_SetCursor+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	79ba      	ldrb	r2, [r7, #6]
 8000656:	429a      	cmp	r2, r3
 8000658:	d303      	bcc.n	8000662 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HD44780_SetCursor+0x60>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	3b01      	subs	r3, #1
 8000660:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	3318      	adds	r3, #24
 8000668:	443b      	add	r3, r7
 800066a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	4413      	add	r3, r2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	b25b      	sxtb	r3, r3
 8000678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800067c:	b25b      	sxtb	r3, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4618      	mov	r0, r3
 8000682:	f000 f8eb 	bl	800085c <SendCommand>
}
 8000686:	bf00      	nop
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd90      	pop	{r4, r7, pc}
 800068e:	bf00      	nop
 8000690:	080031b8 	.word	0x080031b8
 8000694:	2000003b 	.word	0x2000003b

08000698 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HD44780_NoDisplay+0x28>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	f023 0304 	bic.w	r3, r3, #4
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HD44780_NoDisplay+0x28>)
 80006a8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HD44780_NoDisplay+0x28>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f043 0308 	orr.w	r3, r3, #8
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f8d1 	bl	800085c <SendCommand>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000039 	.word	0x20000039

080006c4 <HD44780_Display>:

void HD44780_Display()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <HD44780_Display+0x28>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HD44780_Display+0x28>)
 80006d4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <HD44780_Display+0x28>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f8bb 	bl	800085c <SendCommand>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000039 	.word	0x20000039

080006f0 <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HD44780_NoCursor+0x28>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	f023 0302 	bic.w	r3, r3, #2
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HD44780_NoCursor+0x28>)
 8000700:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HD44780_NoCursor+0x28>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f8a5 	bl	800085c <SendCommand>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000039 	.word	0x20000039

0800071c <HD44780_Cursor>:

void HD44780_Cursor()
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HD44780_Cursor+0x28>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HD44780_Cursor+0x28>)
 800072c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HD44780_Cursor+0x28>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f88f 	bl	800085c <SendCommand>
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000039 	.word	0x20000039

08000748 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HD44780_NoBlink+0x28>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f023 0301 	bic.w	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HD44780_NoBlink+0x28>)
 8000758:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HD44780_NoBlink+0x28>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f879 	bl	800085c <SendCommand>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000039 	.word	0x20000039

08000774 <HD44780_Blink>:

void HD44780_Blink()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HD44780_Blink+0x28>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HD44780_Blink+0x28>)
 8000784:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <HD44780_Blink+0x28>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f863 	bl	800085c <SendCommand>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000039 	.word	0x20000039

080007a0 <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80007a4:	2018      	movs	r0, #24
 80007a6:	f000 f859 	bl	800085c <SendCommand>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b084      	sub	sp, #16
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	6039      	str	r1, [r7, #0]
 80007b8:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	f003 0307 	and.w	r3, r3, #7
 80007c0:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f843 	bl	800085c <SendCommand>
  for (int i=0; i<8; i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	e009      	b.n	80007f0 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	4413      	add	r3, r2
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f847 	bl	8000878 <SendChar>
  for (int i=0; i<8; i++)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b07      	cmp	r3, #7
 80007f4:	ddf2      	ble.n	80007dc <HD44780_CreateSpecialChar+0x2e>
  }
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000808:	e006      	b.n	8000818 <HD44780_PrintStr+0x18>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f830 	bl	8000878 <SendChar>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f4      	bne.n	800080a <HD44780_PrintStr+0xa>
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <HD44780_NoBacklight+0x14>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f85e 	bl	80008f8 <ExpanderWrite>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000003c 	.word	0x2000003c

08000844 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HD44780_Backlight+0x14>)
 800084a:	2208      	movs	r2, #8
 800084c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800084e:	2000      	movs	r0, #0
 8000850:	f000 f852 	bl	80008f8 <ExpanderWrite>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000003c 	.word	0x2000003c

0800085c <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f812 	bl	8000894 <Send>
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f804 	bl	8000894 <Send>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f023 030f 	bic.w	r3, r3, #15
 80008aa:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	011b      	lsls	r3, r3, #4
 80008b0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80008b2:	7bfa      	ldrb	r2, [r7, #15]
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f80b 	bl	80008d6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80008c0:	7bba      	ldrb	r2, [r7, #14]
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 f804 	bl	80008d6 <Write4Bits>
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f808 	bl	80008f8 <ExpanderWrite>
  PulseEnable(value);
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f820 	bl	8000930 <PulseEnable>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <ExpanderWrite+0x30>)
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4313      	orrs	r3, r2
 800090a:	b2db      	uxtb	r3, r3
 800090c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800090e:	f107 020f 	add.w	r2, r7, #15
 8000912:	230a      	movs	r3, #10
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	214e      	movs	r1, #78	; 0x4e
 800091a:	4804      	ldr	r0, [pc, #16]	; (800092c <ExpanderWrite+0x34>)
 800091c:	f001 f806 	bl	800192c <HAL_I2C_Master_Transmit>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000003c 	.word	0x2000003c
 800092c:	20000040 	.word	0x20000040

08000930 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	b2db      	uxtb	r3, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ffd8 	bl	80008f8 <ExpanderWrite>
  DelayUS(20);
 8000948:	2014      	movs	r0, #20
 800094a:	f000 f839 	bl	80009c0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f023 0304 	bic.w	r3, r3, #4
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ffce 	bl	80008f8 <ExpanderWrite>
  DelayUS(20);
 800095c:	2014      	movs	r0, #20
 800095e:	f000 f82f 	bl	80009c0 <DelayUS>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <DelayInit>:

static void DelayInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <DelayInit+0x4c>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <DelayInit+0x4c>)
 8000976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800097a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <DelayInit+0x4c>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <DelayInit+0x4c>)
 8000982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000986:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <DelayInit+0x50>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <DelayInit+0x50>)
 800098e:	f023 0301 	bic.w	r3, r3, #1
 8000992:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <DelayInit+0x50>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a08      	ldr	r2, [pc, #32]	; (80009bc <DelayInit+0x50>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <DelayInit+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80009a6:	bf00      	nop
  __ASM volatile ("NOP");
 80009a8:	bf00      	nop
  __ASM volatile ("NOP");
 80009aa:	bf00      	nop
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000edf0 	.word	0xe000edf0
 80009bc:	e0001000 	.word	0xe0001000

080009c0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80009c0:	b480      	push	{r7}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <DelayUS+0x44>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <DelayUS+0x48>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	0c9a      	lsrs	r2, r3, #18
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <DelayUS+0x4c>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <DelayUS+0x4c>)
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f6      	bhi.n	80009e2 <DelayUS+0x22>
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	371c      	adds	r7, #28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000010 	.word	0x20000010
 8000a08:	431bde83 	.word	0x431bde83
 8000a0c:	e0001000 	.word	0xe0001000

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f000 fb1b 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f8c1 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f000 f985 	bl	8000d2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a22:	f000 f959 	bl	8000cd8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a26:	f000 f929 	bl	8000c7c <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f7ff fd68 	bl	8000500 <HD44780_Init>
    HD44780_Clear();
 8000a30:	f7ff fdea 	bl	8000608 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000a34:	2100      	movs	r1, #0
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fdfc 	bl	8000634 <HD44780_SetCursor>
    HD44780_PrintStr("Welcome to");
 8000a3c:	4852      	ldr	r0, [pc, #328]	; (8000b88 <main+0x178>)
 8000a3e:	f7ff fedf 	bl	8000800 <HD44780_PrintStr>
    HD44780_SetCursor(4,1);
 8000a42:	2101      	movs	r1, #1
 8000a44:	2004      	movs	r0, #4
 8000a46:	f7ff fdf5 	bl	8000634 <HD44780_SetCursor>
    HD44780_PrintStr("Texoham AI");
 8000a4a:	4850      	ldr	r0, [pc, #320]	; (8000b8c <main+0x17c>)
 8000a4c:	f7ff fed8 	bl	8000800 <HD44780_PrintStr>
    HAL_Delay(2000);
 8000a50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a54:	f000 fb6e 	bl	8001134 <HAL_Delay>

    HD44780_Clear();
 8000a58:	f7ff fdd6 	bl	8000608 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fde8 	bl	8000634 <HD44780_SetCursor>
    HD44780_PrintStr("WELCOME");
 8000a64:	484a      	ldr	r0, [pc, #296]	; (8000b90 <main+0x180>)
 8000a66:	f7ff fecb 	bl	8000800 <HD44780_PrintStr>
    HAL_Delay(2000);
 8000a6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a6e:	f000 fb61 	bl	8001134 <HAL_Delay>
    HD44780_NoBacklight();
 8000a72:	f7ff fedb 	bl	800082c <HD44780_NoBacklight>
    HAL_Delay(2000);
 8000a76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a7a:	f000 fb5b 	bl	8001134 <HAL_Delay>
    HD44780_Backlight();
 8000a7e:	f7ff fee1 	bl	8000844 <HD44780_Backlight>

    HAL_Delay(1000);
 8000a82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a86:	f000 fb55 	bl	8001134 <HAL_Delay>
    HD44780_Cursor();
 8000a8a:	f7ff fe47 	bl	800071c <HD44780_Cursor>
    HAL_Delay(1000);
 8000a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a92:	f000 fb4f 	bl	8001134 <HAL_Delay>
    HD44780_Blink();
 8000a96:	f7ff fe6d 	bl	8000774 <HD44780_Blink>
    HAL_Delay(1000);
 8000a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9e:	f000 fb49 	bl	8001134 <HAL_Delay>
    HD44780_NoBlink();
 8000aa2:	f7ff fe51 	bl	8000748 <HD44780_NoBlink>
    HAL_Delay(1000);
 8000aa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aaa:	f000 fb43 	bl	8001134 <HAL_Delay>
    HD44780_NoCursor();
 8000aae:	f7ff fe1f 	bl	80006f0 <HD44780_NoCursor>
    HAL_Delay(1000);
 8000ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab6:	f000 fb3d 	bl	8001134 <HAL_Delay>

    HD44780_NoDisplay();
 8000aba:	f7ff fded 	bl	8000698 <HD44780_NoDisplay>
    HAL_Delay(1000);
 8000abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac2:	f000 fb37 	bl	8001134 <HAL_Delay>
    HD44780_Display();
 8000ac6:	f7ff fdfd 	bl	80006c4 <HD44780_Display>

    HD44780_Clear();
 8000aca:	f7ff fd9d 	bl	8000608 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fdaf 	bl	8000634 <HD44780_SetCursor>
    HD44780_PrintStr("  Welcome to Texoham AI :-)");
 8000ad6:	482f      	ldr	r0, [pc, #188]	; (8000b94 <main+0x184>)
 8000ad8:	f7ff fe92 	bl	8000800 <HD44780_PrintStr>
//    HD44780_SetCursor(0,1);
//    HD44780_PrintStr("  Welcome to Texoham AI :-)");
    for(int x=0; x<40; x=x+1)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e008      	b.n	8000af4 <main+0xe4>
    {
      HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000ae2:	f7ff fe5d 	bl	80007a0 <HD44780_ScrollDisplayLeft>
      HAL_Delay(500);
 8000ae6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aea:	f000 fb23 	bl	8001134 <HAL_Delay>
    for(int x=0; x<40; x=x+1)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	2b27      	cmp	r3, #39	; 0x27
 8000af8:	ddf3      	ble.n	8000ae2 <main+0xd2>
    }
    HD44780_SetCursor(0,1);
 8000afa:	2101      	movs	r1, #1
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fd99 	bl	8000634 <HD44780_SetCursor>
    HD44780_PrintStr("  Learn , Explore and Innovate:-)");
 8000b02:	4825      	ldr	r0, [pc, #148]	; (8000b98 <main+0x188>)
 8000b04:	f7ff fe7c 	bl	8000800 <HD44780_PrintStr>
    for(int x=0; x<40; x=x+1)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	e008      	b.n	8000b20 <main+0x110>
    {
      HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000b0e:	f7ff fe47 	bl	80007a0 <HD44780_ScrollDisplayLeft>
      HAL_Delay(500);
 8000b12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b16:	f000 fb0d 	bl	8001134 <HAL_Delay>
    for(int x=0; x<40; x=x+1)
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	2b27      	cmp	r3, #39	; 0x27
 8000b24:	ddf3      	ble.n	8000b0e <main+0xfe>
    }
    char snum[5];
    for ( int x = 20; x >= 0 ; x-- )
 8000b26:	2314      	movs	r3, #20
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	e019      	b.n	8000b60 <main+0x150>
    {
      itoa(x, snum, 10);
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	220a      	movs	r2, #10
 8000b30:	4619      	mov	r1, r3
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f002 fac4 	bl	80030c0 <itoa>
      HD44780_Clear();
 8000b38:	f7ff fd66 	bl	8000608 <HD44780_Clear>
      HD44780_SetCursor(0,0);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff fd78 	bl	8000634 <HD44780_SetCursor>
      HD44780_PrintStr("Count Down :");
 8000b44:	4815      	ldr	r0, [pc, #84]	; (8000b9c <main+0x18c>)
 8000b46:	f7ff fe5b 	bl	8000800 <HD44780_PrintStr>
      HD44780_PrintStr(snum);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fe57 	bl	8000800 <HD44780_PrintStr>
      HAL_Delay (1000);
 8000b52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b56:	f000 faed 	bl	8001134 <HAL_Delay>
    for ( int x = 20; x >= 0 ; x-- )
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dae2      	bge.n	8000b2c <main+0x11c>
    }
    HD44780_Clear();
 8000b66:	f7ff fd4f 	bl	8000608 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fd61 	bl	8000634 <HD44780_SetCursor>
    HD44780_PrintStr("Welcome to");
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <main+0x178>)
 8000b74:	f7ff fe44 	bl	8000800 <HD44780_PrintStr>
    HD44780_SetCursor(4,1);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2004      	movs	r0, #4
 8000b7c:	f7ff fd5a 	bl	8000634 <HD44780_SetCursor>
    HD44780_PrintStr("Texoham AI");
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <main+0x17c>)
 8000b82:	f7ff fe3d 	bl	8000800 <HD44780_PrintStr>

    /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <main+0x176>
 8000b88:	080031c8 	.word	0x080031c8
 8000b8c:	080031d4 	.word	0x080031d4
 8000b90:	080031e0 	.word	0x080031e0
 8000b94:	080031e8 	.word	0x080031e8
 8000b98:	08003204 	.word	0x08003204
 8000b9c:	08003228 	.word	0x08003228

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	; 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2234      	movs	r2, #52	; 0x34
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 faca 	bl	8003148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <SystemClock_Config+0xd8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bec:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <SystemClock_Config+0xd8>)
 8000bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <SystemClock_Config+0xd8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c14:	2310      	movs	r3, #16
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c18:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c26:	2302      	movs	r3, #2
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fcce 	bl	80025d0 <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c3a:	f000 f8e5 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c42:	2302      	movs	r3, #2
 8000c44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 f96e 	bl	8001f3c <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c66:	f000 f8cf 	bl	8000e08 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3750      	adds	r7, #80	; 0x50
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <MX_I2C1_Init+0x54>)
 8000c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c88:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <MX_I2C1_Init+0x58>)
 8000c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_I2C1_Init+0x50>)
 8000cba:	f000 fcf3 	bl	80016a4 <HAL_I2C_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc4:	f000 f8a0 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000040 	.word	0x20000040
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	000186a0 	.word	0x000186a0

08000cd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <MX_USART2_UART_Init+0x50>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_USART2_UART_Init+0x4c>)
 8000d10:	f001 fefc 	bl	8002b0c <HAL_UART_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d1a:	f000 f875 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000094 	.word	0x20000094
 8000d28:	40004400 	.word	0x40004400

08000d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a2c      	ldr	r2, [pc, #176]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a1e      	ldr	r2, [pc, #120]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <MX_GPIO_Init+0xd0>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2120      	movs	r1, #32
 8000db6:	4812      	ldr	r0, [pc, #72]	; (8000e00 <MX_GPIO_Init+0xd4>)
 8000db8:	f000 fc5a 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dc2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480c      	ldr	r0, [pc, #48]	; (8000e04 <MX_GPIO_Init+0xd8>)
 8000dd4:	f000 fab8 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dd8:	2320      	movs	r3, #32
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_GPIO_Init+0xd4>)
 8000df0:	f000 faaa 	bl	8001348 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020800 	.word	0x40020800

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>
	...

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	; 0x40
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e52:	2007      	movs	r0, #7
 8000e54:	f000 fa44 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_I2C_MspInit+0x84>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d12c      	bne.n	8000ee0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <HAL_I2C_MspInit+0x8c>)
 8000ec0:	f000 fa42 	bl	8001348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_I2C_MspInit+0x88>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3728      	adds	r7, #40	; 0x28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_UART_MspInit+0x84>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d12b      	bne.n	8000f6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	6413      	str	r3, [r2, #64]	; 0x40
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_UART_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f4e:	230c      	movs	r3, #12
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_UART_MspInit+0x8c>)
 8000f6a:	f000 f9ed 	bl	8001348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f890 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f002 f895 	bl	8003158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fcef 	bl	8000a10 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001040:	08003288 	.word	0x08003288
  ldr r2, =_sbss
 8001044:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001048:	200000dc 	.word	0x200000dc

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f931 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fec6 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f93b 	bl	800132e <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f911 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000010 	.word	0x20000010
 80010ec:	20000018 	.word	0x20000018
 80010f0:	20000014 	.word	0x20000014

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000018 	.word	0x20000018
 8001118:	200000d8 	.word	0x200000d8

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200000d8 	.word	0x200000d8

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000018 	.word	0x20000018

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff47 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff5c 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff8e 	bl	8001234 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5d 	bl	80011e0 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffb0 	bl	800129c <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	e165      	b.n	8001630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 8154 	bne.w	800162a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b01      	cmp	r3, #1
 800138c:	d005      	beq.n	800139a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001396:	2b02      	cmp	r3, #2
 8001398:	d130      	bne.n	80013fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 0201 	and.w	r2, r3, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b03      	cmp	r3, #3
 8001406:	d017      	beq.n	8001438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d123      	bne.n	800148c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	08da      	lsrs	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3208      	adds	r2, #8
 800144c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	69b9      	ldr	r1, [r7, #24]
 8001488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80ae 	beq.w	800162a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b5d      	ldr	r3, [pc, #372]	; (8001648 <HAL_GPIO_Init+0x300>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a5c      	ldr	r2, [pc, #368]	; (8001648 <HAL_GPIO_Init+0x300>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b5a      	ldr	r3, [pc, #360]	; (8001648 <HAL_GPIO_Init+0x300>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ea:	4a58      	ldr	r2, [pc, #352]	; (800164c <HAL_GPIO_Init+0x304>)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	220f      	movs	r2, #15
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_GPIO_Init+0x308>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d025      	beq.n	8001562 <HAL_GPIO_Init+0x21a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <HAL_GPIO_Init+0x30c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d01f      	beq.n	800155e <HAL_GPIO_Init+0x216>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4d      	ldr	r2, [pc, #308]	; (8001658 <HAL_GPIO_Init+0x310>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d019      	beq.n	800155a <HAL_GPIO_Init+0x212>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_GPIO_Init+0x314>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0x20e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4b      	ldr	r2, [pc, #300]	; (8001660 <HAL_GPIO_Init+0x318>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00d      	beq.n	8001552 <HAL_GPIO_Init+0x20a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4a      	ldr	r2, [pc, #296]	; (8001664 <HAL_GPIO_Init+0x31c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d007      	beq.n	800154e <HAL_GPIO_Init+0x206>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a49      	ldr	r2, [pc, #292]	; (8001668 <HAL_GPIO_Init+0x320>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_GPIO_Init+0x202>
 8001546:	2306      	movs	r3, #6
 8001548:	e00c      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 800154a:	2307      	movs	r3, #7
 800154c:	e00a      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 800154e:	2305      	movs	r3, #5
 8001550:	e008      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 8001552:	2304      	movs	r3, #4
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 8001556:	2303      	movs	r3, #3
 8001558:	e004      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 800155a:	2302      	movs	r3, #2
 800155c:	e002      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <HAL_GPIO_Init+0x21c>
 8001562:	2300      	movs	r3, #0
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	f002 0203 	and.w	r2, r2, #3
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	4093      	lsls	r3, r2
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001574:	4935      	ldr	r1, [pc, #212]	; (800164c <HAL_GPIO_Init+0x304>)
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001582:	4b3a      	ldr	r3, [pc, #232]	; (800166c <HAL_GPIO_Init+0x324>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015a6:	4a31      	ldr	r2, [pc, #196]	; (800166c <HAL_GPIO_Init+0x324>)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_GPIO_Init+0x324>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d0:	4a26      	ldr	r2, [pc, #152]	; (800166c <HAL_GPIO_Init+0x324>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_GPIO_Init+0x324>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <HAL_GPIO_Init+0x324>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_GPIO_Init+0x324>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001624:	4a11      	ldr	r2, [pc, #68]	; (800166c <HAL_GPIO_Init+0x324>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3301      	adds	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	2b0f      	cmp	r3, #15
 8001634:	f67f ae96 	bls.w	8001364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40013800 	.word	0x40013800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020400 	.word	0x40020400
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40021000 	.word	0x40021000
 8001664:	40021400 	.word	0x40021400
 8001668:	40021800 	.word	0x40021800
 800166c:	40013c00 	.word	0x40013c00

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	619a      	str	r2, [r3, #24]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e12b      	b.n	800190e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fbca 	bl	8000e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2224      	movs	r2, #36	; 0x24
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001708:	f000 fd0a 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 800170c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4a81      	ldr	r2, [pc, #516]	; (8001918 <HAL_I2C_Init+0x274>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d807      	bhi.n	8001728 <HAL_I2C_Init+0x84>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4a80      	ldr	r2, [pc, #512]	; (800191c <HAL_I2C_Init+0x278>)
 800171c:	4293      	cmp	r3, r2
 800171e:	bf94      	ite	ls
 8001720:	2301      	movls	r3, #1
 8001722:	2300      	movhi	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	e006      	b.n	8001736 <HAL_I2C_Init+0x92>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a7d      	ldr	r2, [pc, #500]	; (8001920 <HAL_I2C_Init+0x27c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	bf94      	ite	ls
 8001730:	2301      	movls	r3, #1
 8001732:	2300      	movhi	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0e7      	b.n	800190e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4a78      	ldr	r2, [pc, #480]	; (8001924 <HAL_I2C_Init+0x280>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0c9b      	lsrs	r3, r3, #18
 8001748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a6a      	ldr	r2, [pc, #424]	; (8001918 <HAL_I2C_Init+0x274>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d802      	bhi.n	8001778 <HAL_I2C_Init+0xd4>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	e009      	b.n	800178c <HAL_I2C_Init+0xe8>
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	4a69      	ldr	r2, [pc, #420]	; (8001928 <HAL_I2C_Init+0x284>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	3301      	adds	r3, #1
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	430b      	orrs	r3, r1
 8001792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800179e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	495c      	ldr	r1, [pc, #368]	; (8001918 <HAL_I2C_Init+0x274>)
 80017a8:	428b      	cmp	r3, r1
 80017aa:	d819      	bhi.n	80017e0 <HAL_I2C_Init+0x13c>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e59      	subs	r1, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ba:	1c59      	adds	r1, r3, #1
 80017bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017c0:	400b      	ands	r3, r1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <HAL_I2C_Init+0x138>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1e59      	subs	r1, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017da:	e051      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 80017dc:	2304      	movs	r3, #4
 80017de:	e04f      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d111      	bne.n	800180c <HAL_I2C_Init+0x168>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1e58      	subs	r0, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	440b      	add	r3, r1
 80017f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e012      	b.n	8001832 <HAL_I2C_Init+0x18e>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1e58      	subs	r0, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	0099      	lsls	r1, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2C_Init+0x196>
 8001836:	2301      	movs	r3, #1
 8001838:	e022      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10e      	bne.n	8001860 <HAL_I2C_Init+0x1bc>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1e58      	subs	r0, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6859      	ldr	r1, [r3, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	440b      	add	r3, r1
 8001850:	fbb0 f3f3 	udiv	r3, r0, r3
 8001854:	3301      	adds	r3, #1
 8001856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800185a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185e:	e00f      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1e58      	subs	r0, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	0099      	lsls	r1, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	fbb0 f3f3 	udiv	r3, r0, r3
 8001876:	3301      	adds	r3, #1
 8001878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	6809      	ldr	r1, [r1, #0]
 8001884:	4313      	orrs	r3, r2
 8001886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6911      	ldr	r1, [r2, #16]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68d2      	ldr	r2, [r2, #12]
 80018ba:	4311      	orrs	r1, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	430b      	orrs	r3, r1
 80018c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2220      	movs	r2, #32
 80018fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	000186a0 	.word	0x000186a0
 800191c:	001e847f 	.word	0x001e847f
 8001920:	003d08ff 	.word	0x003d08ff
 8001924:	431bde83 	.word	0x431bde83
 8001928:	10624dd3 	.word	0x10624dd3

0800192c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	461a      	mov	r2, r3
 8001938:	460b      	mov	r3, r1
 800193a:	817b      	strh	r3, [r7, #10]
 800193c:	4613      	mov	r3, r2
 800193e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff fbec 	bl	800111c <HAL_GetTick>
 8001944:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b20      	cmp	r3, #32
 8001950:	f040 80e0 	bne.w	8001b14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2319      	movs	r3, #25
 800195a:	2201      	movs	r2, #1
 800195c:	4970      	ldr	r1, [pc, #448]	; (8001b20 <HAL_I2C_Master_Transmit+0x1f4>)
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f964 	bl	8001c2c <I2C_WaitOnFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800196a:	2302      	movs	r3, #2
 800196c:	e0d3      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_I2C_Master_Transmit+0x50>
 8001978:	2302      	movs	r3, #2
 800197a:	e0cc      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b01      	cmp	r3, #1
 8001990:	d007      	beq.n	80019a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2221      	movs	r2, #33	; 0x21
 80019b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2210      	movs	r2, #16
 80019be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	893a      	ldrh	r2, [r7, #8]
 80019d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a50      	ldr	r2, [pc, #320]	; (8001b24 <HAL_I2C_Master_Transmit+0x1f8>)
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019e4:	8979      	ldrh	r1, [r7, #10]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	6a3a      	ldr	r2, [r7, #32]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 f89c 	bl	8001b28 <I2C_MasterRequestWrite>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e08d      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a10:	e066      	b.n	8001ae0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	6a39      	ldr	r1, [r7, #32]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f9de 	bl	8001dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00d      	beq.n	8001a3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d107      	bne.n	8001a3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06b      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d11b      	bne.n	8001ab4 <HAL_I2C_Master_Transmit+0x188>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d017      	beq.n	8001ab4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	6a39      	ldr	r1, [r7, #32]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9ce 	bl	8001e5a <I2C_WaitOnBTFFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d107      	bne.n	8001adc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ada:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e01a      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d194      	bne.n	8001a12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	00100002 	.word	0x00100002
 8001b24:	ffff0000 	.word	0xffff0000

08001b28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	460b      	mov	r3, r1
 8001b36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d006      	beq.n	8001b52 <I2C_MasterRequestWrite+0x2a>
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d003      	beq.n	8001b52 <I2C_MasterRequestWrite+0x2a>
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b50:	d108      	bne.n	8001b64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e00b      	b.n	8001b7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b68:	2b12      	cmp	r3, #18
 8001b6a:	d107      	bne.n	8001b7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f84f 	bl	8001c2c <I2C_WaitOnFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00d      	beq.n	8001bb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba2:	d103      	bne.n	8001bac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e035      	b.n	8001c1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bb8:	d108      	bne.n	8001bcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bba:	897b      	ldrh	r3, [r7, #10]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	e01b      	b.n	8001c04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bcc:	897b      	ldrh	r3, [r7, #10]
 8001bce:	11db      	asrs	r3, r3, #7
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f003 0306 	and.w	r3, r3, #6
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f063 030f 	orn	r3, r3, #15
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <I2C_MasterRequestWrite+0xfc>)
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f875 	bl	8001cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e010      	b.n	8001c1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bfa:	897b      	ldrh	r3, [r7, #10]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <I2C_MasterRequestWrite+0x100>)
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f865 	bl	8001cda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	00010008 	.word	0x00010008
 8001c28:	00010002 	.word	0x00010002

08001c2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c3c:	e025      	b.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d021      	beq.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c46:	f7ff fa69 	bl	800111c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d302      	bcc.n	8001c5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d116      	bne.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0220 	orr.w	r2, r3, #32
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e023      	b.n	8001cd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d10d      	bne.n	8001cb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf0c      	ite	eq
 8001ca6:	2301      	moveq	r3, #1
 8001ca8:	2300      	movne	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	e00c      	b.n	8001cca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	bf0c      	ite	eq
 8001cc2:	2301      	moveq	r3, #1
 8001cc4:	2300      	movne	r3, #0
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d0b6      	beq.n	8001c3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ce8:	e051      	b.n	8001d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf8:	d123      	bne.n	8001d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f043 0204 	orr.w	r2, r3, #4
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e046      	b.n	8001dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d021      	beq.n	8001d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d4a:	f7ff f9e7 	bl	800111c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d302      	bcc.n	8001d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d116      	bne.n	8001d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f043 0220 	orr.w	r2, r3, #32
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e020      	b.n	8001dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10c      	bne.n	8001db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4013      	ands	r3, r2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	e00b      	b.n	8001dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	43da      	mvns	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d18d      	bne.n	8001cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001de4:	e02d      	b.n	8001e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f878 	bl	8001edc <I2C_IsAcknowledgeFailed>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e02d      	b.n	8001e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d021      	beq.n	8001e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfe:	f7ff f98d 	bl	800111c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d302      	bcc.n	8001e14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d116      	bne.n	8001e42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f043 0220 	orr.w	r2, r3, #32
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e007      	b.n	8001e52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d1ca      	bne.n	8001de6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e66:	e02d      	b.n	8001ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f000 f837 	bl	8001edc <I2C_IsAcknowledgeFailed>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e02d      	b.n	8001ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7e:	d021      	beq.n	8001ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e80:	f7ff f94c 	bl	800111c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d302      	bcc.n	8001e96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d116      	bne.n	8001ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f043 0220 	orr.w	r2, r3, #32
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e007      	b.n	8001ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d1ca      	bne.n	8001e68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	d11b      	bne.n	8001f2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001efc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f043 0204 	orr.w	r2, r3, #4
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0cc      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b68      	ldr	r3, [pc, #416]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d90c      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b65      	ldr	r3, [pc, #404]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b63      	ldr	r3, [pc, #396]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0b8      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d020      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f90:	4b59      	ldr	r3, [pc, #356]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a58      	ldr	r2, [pc, #352]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fa8:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4a52      	ldr	r2, [pc, #328]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	494d      	ldr	r1, [pc, #308]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d044      	beq.n	800205c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d119      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e07f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d107      	bne.n	800200a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e06f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e067      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4934      	ldr	r1, [pc, #208]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	f7ff f876 	bl	800111c <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7ff f872 	bl	800111c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e04f      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d20c      	bcs.n	8002084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e032      	b.n	80020ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4916      	ldr	r1, [pc, #88]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	490e      	ldr	r1, [pc, #56]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020c2:	f000 f855 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	490a      	ldr	r1, [pc, #40]	; (80020fc <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	5ccb      	ldrb	r3, [r1, r3]
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe ffd6 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023c00 	.word	0x40023c00
 80020f8:	40023800 	.word	0x40023800
 80020fc:	08003238 	.word	0x08003238
 8002100:	20000010 	.word	0x20000010
 8002104:	20000014 	.word	0x20000014

08002108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_RCC_GetHCLKFreq+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000010 	.word	0x20000010

08002120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002124:	f7ff fff0 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0a9b      	lsrs	r3, r3, #10
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4903      	ldr	r1, [pc, #12]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	08003248 	.word	0x08003248

08002148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800214c:	f7ff ffdc 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0b5b      	lsrs	r3, r3, #13
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4903      	ldr	r1, [pc, #12]	; (800216c <HAL_RCC_GetPCLK2Freq+0x24>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	08003248 	.word	0x08003248

08002170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002174:	b0ae      	sub	sp, #184	; 0xb8
 8002176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002196:	4bcb      	ldr	r3, [pc, #812]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	f200 8206 	bhi.w	80025b0 <HAL_RCC_GetSysClockFreq+0x440>
 80021a4:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80021a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021aa:	bf00      	nop
 80021ac:	080021e1 	.word	0x080021e1
 80021b0:	080025b1 	.word	0x080025b1
 80021b4:	080025b1 	.word	0x080025b1
 80021b8:	080025b1 	.word	0x080025b1
 80021bc:	080021e9 	.word	0x080021e9
 80021c0:	080025b1 	.word	0x080025b1
 80021c4:	080025b1 	.word	0x080025b1
 80021c8:	080025b1 	.word	0x080025b1
 80021cc:	080021f1 	.word	0x080021f1
 80021d0:	080025b1 	.word	0x080025b1
 80021d4:	080025b1 	.word	0x080025b1
 80021d8:	080025b1 	.word	0x080025b1
 80021dc:	080023e1 	.word	0x080023e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e0:	4bb9      	ldr	r3, [pc, #740]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80021e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80021e6:	e1e7      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e8:	4bb8      	ldr	r3, [pc, #736]	; (80024cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80021ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021ee:	e1e3      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f0:	4bb4      	ldr	r3, [pc, #720]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021fc:	4bb1      	ldr	r3, [pc, #708]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d071      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002208:	4bae      	ldr	r3, [pc, #696]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	2200      	movs	r2, #0
 8002210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002214:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800221c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002220:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800222a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800222e:	4622      	mov	r2, r4
 8002230:	462b      	mov	r3, r5
 8002232:	f04f 0000 	mov.w	r0, #0
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	0159      	lsls	r1, r3, #5
 800223c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002240:	0150      	lsls	r0, r2, #5
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4621      	mov	r1, r4
 8002248:	1a51      	subs	r1, r2, r1
 800224a:	6439      	str	r1, [r7, #64]	; 0x40
 800224c:	4629      	mov	r1, r5
 800224e:	eb63 0301 	sbc.w	r3, r3, r1
 8002252:	647b      	str	r3, [r7, #68]	; 0x44
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002260:	4649      	mov	r1, r9
 8002262:	018b      	lsls	r3, r1, #6
 8002264:	4641      	mov	r1, r8
 8002266:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800226a:	4641      	mov	r1, r8
 800226c:	018a      	lsls	r2, r1, #6
 800226e:	4641      	mov	r1, r8
 8002270:	1a51      	subs	r1, r2, r1
 8002272:	63b9      	str	r1, [r7, #56]	; 0x38
 8002274:	4649      	mov	r1, r9
 8002276:	eb63 0301 	sbc.w	r3, r3, r1
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002288:	4649      	mov	r1, r9
 800228a:	00cb      	lsls	r3, r1, #3
 800228c:	4641      	mov	r1, r8
 800228e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002292:	4641      	mov	r1, r8
 8002294:	00ca      	lsls	r2, r1, #3
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	4603      	mov	r3, r0
 800229c:	4622      	mov	r2, r4
 800229e:	189b      	adds	r3, r3, r2
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
 80022a2:	462b      	mov	r3, r5
 80022a4:	460a      	mov	r2, r1
 80022a6:	eb42 0303 	adc.w	r3, r2, r3
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022b8:	4629      	mov	r1, r5
 80022ba:	024b      	lsls	r3, r1, #9
 80022bc:	4621      	mov	r1, r4
 80022be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022c2:	4621      	mov	r1, r4
 80022c4:	024a      	lsls	r2, r1, #9
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80022dc:	f7fd ff92 	bl	8000204 <__aeabi_uldivmod>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4613      	mov	r3, r2
 80022e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022ea:	e067      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ec:	4b75      	ldr	r3, [pc, #468]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	099b      	lsrs	r3, r3, #6
 80022f2:	2200      	movs	r2, #0
 80022f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80022f8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80022fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002304:	67bb      	str	r3, [r7, #120]	; 0x78
 8002306:	2300      	movs	r3, #0
 8002308:	67fb      	str	r3, [r7, #124]	; 0x7c
 800230a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800230e:	4622      	mov	r2, r4
 8002310:	462b      	mov	r3, r5
 8002312:	f04f 0000 	mov.w	r0, #0
 8002316:	f04f 0100 	mov.w	r1, #0
 800231a:	0159      	lsls	r1, r3, #5
 800231c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002320:	0150      	lsls	r0, r2, #5
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4621      	mov	r1, r4
 8002328:	1a51      	subs	r1, r2, r1
 800232a:	62b9      	str	r1, [r7, #40]	; 0x28
 800232c:	4629      	mov	r1, r5
 800232e:	eb63 0301 	sbc.w	r3, r3, r1
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002340:	4649      	mov	r1, r9
 8002342:	018b      	lsls	r3, r1, #6
 8002344:	4641      	mov	r1, r8
 8002346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800234a:	4641      	mov	r1, r8
 800234c:	018a      	lsls	r2, r1, #6
 800234e:	4641      	mov	r1, r8
 8002350:	ebb2 0a01 	subs.w	sl, r2, r1
 8002354:	4649      	mov	r1, r9
 8002356:	eb63 0b01 	sbc.w	fp, r3, r1
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002366:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800236a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800236e:	4692      	mov	sl, r2
 8002370:	469b      	mov	fp, r3
 8002372:	4623      	mov	r3, r4
 8002374:	eb1a 0303 	adds.w	r3, sl, r3
 8002378:	623b      	str	r3, [r7, #32]
 800237a:	462b      	mov	r3, r5
 800237c:	eb4b 0303 	adc.w	r3, fp, r3
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800238e:	4629      	mov	r1, r5
 8002390:	028b      	lsls	r3, r1, #10
 8002392:	4621      	mov	r1, r4
 8002394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002398:	4621      	mov	r1, r4
 800239a:	028a      	lsls	r2, r1, #10
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023a4:	2200      	movs	r2, #0
 80023a6:	673b      	str	r3, [r7, #112]	; 0x70
 80023a8:	677a      	str	r2, [r7, #116]	; 0x74
 80023aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80023ae:	f7fd ff29 	bl	8000204 <__aeabi_uldivmod>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4613      	mov	r3, r2
 80023b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023bc:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80023ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80023d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80023de:	e0eb      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e0:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ec:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d06b      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f8:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	099b      	lsrs	r3, r3, #6
 80023fe:	2200      	movs	r2, #0
 8002400:	66bb      	str	r3, [r7, #104]	; 0x68
 8002402:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240a:	663b      	str	r3, [r7, #96]	; 0x60
 800240c:	2300      	movs	r3, #0
 800240e:	667b      	str	r3, [r7, #100]	; 0x64
 8002410:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002414:	4622      	mov	r2, r4
 8002416:	462b      	mov	r3, r5
 8002418:	f04f 0000 	mov.w	r0, #0
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	0159      	lsls	r1, r3, #5
 8002422:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002426:	0150      	lsls	r0, r2, #5
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4621      	mov	r1, r4
 800242e:	1a51      	subs	r1, r2, r1
 8002430:	61b9      	str	r1, [r7, #24]
 8002432:	4629      	mov	r1, r5
 8002434:	eb63 0301 	sbc.w	r3, r3, r1
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002446:	4659      	mov	r1, fp
 8002448:	018b      	lsls	r3, r1, #6
 800244a:	4651      	mov	r1, sl
 800244c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002450:	4651      	mov	r1, sl
 8002452:	018a      	lsls	r2, r1, #6
 8002454:	4651      	mov	r1, sl
 8002456:	ebb2 0801 	subs.w	r8, r2, r1
 800245a:	4659      	mov	r1, fp
 800245c:	eb63 0901 	sbc.w	r9, r3, r1
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800246c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002470:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002474:	4690      	mov	r8, r2
 8002476:	4699      	mov	r9, r3
 8002478:	4623      	mov	r3, r4
 800247a:	eb18 0303 	adds.w	r3, r8, r3
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	462b      	mov	r3, r5
 8002482:	eb49 0303 	adc.w	r3, r9, r3
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002494:	4629      	mov	r1, r5
 8002496:	024b      	lsls	r3, r1, #9
 8002498:	4621      	mov	r1, r4
 800249a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800249e:	4621      	mov	r1, r4
 80024a0:	024a      	lsls	r2, r1, #9
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024aa:	2200      	movs	r2, #0
 80024ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80024ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024b4:	f7fd fea6 	bl	8000204 <__aeabi_uldivmod>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4613      	mov	r3, r2
 80024be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024c2:	e065      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x420>
 80024c4:	40023800 	.word	0x40023800
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d0:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	2200      	movs	r2, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	4611      	mov	r1, r2
 80024dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024e0:	653b      	str	r3, [r7, #80]	; 0x50
 80024e2:	2300      	movs	r3, #0
 80024e4:	657b      	str	r3, [r7, #84]	; 0x54
 80024e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80024ea:	4642      	mov	r2, r8
 80024ec:	464b      	mov	r3, r9
 80024ee:	f04f 0000 	mov.w	r0, #0
 80024f2:	f04f 0100 	mov.w	r1, #0
 80024f6:	0159      	lsls	r1, r3, #5
 80024f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024fc:	0150      	lsls	r0, r2, #5
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4641      	mov	r1, r8
 8002504:	1a51      	subs	r1, r2, r1
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	4649      	mov	r1, r9
 800250a:	eb63 0301 	sbc.w	r3, r3, r1
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800251c:	4659      	mov	r1, fp
 800251e:	018b      	lsls	r3, r1, #6
 8002520:	4651      	mov	r1, sl
 8002522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002526:	4651      	mov	r1, sl
 8002528:	018a      	lsls	r2, r1, #6
 800252a:	4651      	mov	r1, sl
 800252c:	1a54      	subs	r4, r2, r1
 800252e:	4659      	mov	r1, fp
 8002530:	eb63 0501 	sbc.w	r5, r3, r1
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	00eb      	lsls	r3, r5, #3
 800253e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002542:	00e2      	lsls	r2, r4, #3
 8002544:	4614      	mov	r4, r2
 8002546:	461d      	mov	r5, r3
 8002548:	4643      	mov	r3, r8
 800254a:	18e3      	adds	r3, r4, r3
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	464b      	mov	r3, r9
 8002550:	eb45 0303 	adc.w	r3, r5, r3
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002562:	4629      	mov	r1, r5
 8002564:	028b      	lsls	r3, r1, #10
 8002566:	4621      	mov	r1, r4
 8002568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800256c:	4621      	mov	r1, r4
 800256e:	028a      	lsls	r2, r1, #10
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002578:	2200      	movs	r2, #0
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
 800257c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800257e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002582:	f7fd fe3f 	bl	8000204 <__aeabi_uldivmod>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4613      	mov	r3, r2
 800258c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	0f1b      	lsrs	r3, r3, #28
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800259e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025ae:	e003      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80025b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	37b8      	adds	r7, #184	; 0xb8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	00f42400 	.word	0x00f42400

080025d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e28d      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 8083 	beq.w	80026f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025f0:	4b94      	ldr	r3, [pc, #592]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d019      	beq.n	8002630 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025fc:	4b91      	ldr	r3, [pc, #580]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002604:	2b08      	cmp	r3, #8
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002608:	4b8e      	ldr	r3, [pc, #568]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002614:	d00c      	beq.n	8002630 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002616:	4b8b      	ldr	r3, [pc, #556]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d112      	bne.n	8002648 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b88      	ldr	r3, [pc, #544]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262e:	d10b      	bne.n	8002648 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002630:	4b84      	ldr	r3, [pc, #528]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d05b      	beq.n	80026f4 <HAL_RCC_OscConfig+0x124>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d157      	bne.n	80026f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e25a      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002650:	d106      	bne.n	8002660 <HAL_RCC_OscConfig+0x90>
 8002652:	4b7c      	ldr	r3, [pc, #496]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a7b      	ldr	r2, [pc, #492]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e01d      	b.n	800269c <HAL_RCC_OscConfig+0xcc>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0xb4>
 800266a:	4b76      	ldr	r3, [pc, #472]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a75      	ldr	r2, [pc, #468]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b73      	ldr	r3, [pc, #460]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a72      	ldr	r2, [pc, #456]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xcc>
 8002684:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a6e      	ldr	r2, [pc, #440]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b6c      	ldr	r3, [pc, #432]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6b      	ldr	r2, [pc, #428]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fd3a 	bl	800111c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ac:	f7fe fd36 	bl	800111c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e21f      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026be:	4b61      	ldr	r3, [pc, #388]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0xdc>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe fd26 	bl	800111c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe fd22 	bl	800111c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e20b      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e6:	4b57      	ldr	r3, [pc, #348]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x104>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d06f      	beq.n	80027e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002702:	4b50      	ldr	r3, [pc, #320]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b00      	cmp	r3, #0
 800270c:	d017      	beq.n	800273e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800270e:	4b4d      	ldr	r3, [pc, #308]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002716:	2b08      	cmp	r3, #8
 8002718:	d105      	bne.n	8002726 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800271a:	4b4a      	ldr	r3, [pc, #296]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d11c      	bne.n	800276c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002732:	4b44      	ldr	r3, [pc, #272]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d116      	bne.n	800276c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d005      	beq.n	8002756 <HAL_RCC_OscConfig+0x186>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d001      	beq.n	8002756 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e1d3      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4937      	ldr	r1, [pc, #220]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	e03a      	b.n	80027e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002774:	4b34      	ldr	r3, [pc, #208]	; (8002848 <HAL_RCC_OscConfig+0x278>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7fe fccf 	bl	800111c <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002782:	f7fe fccb 	bl	800111c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e1b4      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b28      	ldr	r3, [pc, #160]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4925      	ldr	r1, [pc, #148]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]
 80027b4:	e015      	b.n	80027e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_OscConfig+0x278>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fcae 	bl	800111c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c4:	f7fe fcaa 	bl	800111c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e193      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d036      	beq.n	800285c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_RCC_OscConfig+0x27c>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7fe fc8e 	bl	800111c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002804:	f7fe fc8a 	bl	800111c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e173      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 8002818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x234>
 8002822:	e01b      	b.n	800285c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_OscConfig+0x27c>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7fe fc77 	bl	800111c <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002830:	e00e      	b.n	8002850 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002832:	f7fe fc73 	bl	800111c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d907      	bls.n	8002850 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e15c      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
 8002844:	40023800 	.word	0x40023800
 8002848:	42470000 	.word	0x42470000
 800284c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002850:	4b8a      	ldr	r3, [pc, #552]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ea      	bne.n	8002832 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8097 	beq.w	8002998 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286e:	4b83      	ldr	r3, [pc, #524]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10f      	bne.n	800289a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	4b7f      	ldr	r3, [pc, #508]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a7e      	ldr	r2, [pc, #504]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b7c      	ldr	r3, [pc, #496]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002896:	2301      	movs	r3, #1
 8002898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b79      	ldr	r3, [pc, #484]	; (8002a80 <HAL_RCC_OscConfig+0x4b0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d118      	bne.n	80028d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a6:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <HAL_RCC_OscConfig+0x4b0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a75      	ldr	r2, [pc, #468]	; (8002a80 <HAL_RCC_OscConfig+0x4b0>)
 80028ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fc33 	bl	800111c <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ba:	f7fe fc2f 	bl	800111c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e118      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <HAL_RCC_OscConfig+0x4b0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x31e>
 80028e0:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6713      	str	r3, [r2, #112]	; 0x70
 80028ec:	e01c      	b.n	8002928 <HAL_RCC_OscConfig+0x358>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x340>
 80028f6:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a60      	ldr	r2, [pc, #384]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	4b5e      	ldr	r3, [pc, #376]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a5d      	ldr	r2, [pc, #372]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0x358>
 8002910:	4b5a      	ldr	r3, [pc, #360]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a59      	ldr	r2, [pc, #356]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
 800291c:	4b57      	ldr	r3, [pc, #348]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a56      	ldr	r2, [pc, #344]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002922:	f023 0304 	bic.w	r3, r3, #4
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fbf4 	bl	800111c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fbf0 	bl	800111c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0d7      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294e:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ee      	beq.n	8002938 <HAL_RCC_OscConfig+0x368>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fbde 	bl	800111c <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7fe fbda 	bl	800111c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e0c1      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297a:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ee      	bne.n	8002964 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	4a3a      	ldr	r2, [pc, #232]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002996:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80ad 	beq.w	8002afc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a2:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d060      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d145      	bne.n	8002a42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_RCC_OscConfig+0x4b4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe fbae 	bl	800111c <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fbaa 	bl	800111c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e093      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	019b      	lsls	r3, r3, #6
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	3b01      	subs	r3, #1
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	071b      	lsls	r3, r3, #28
 8002a0e:	491b      	ldr	r1, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x4b4>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fb7f 	bl	800111c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe fb7b 	bl	800111c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e064      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x452>
 8002a40:	e05c      	b.n	8002afc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_RCC_OscConfig+0x4b4>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fb68 	bl	800111c <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe fb64 	bl	800111c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e04d      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_OscConfig+0x4ac>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x480>
 8002a6e:	e045      	b.n	8002afc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e040      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000
 8002a84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a88:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <HAL_RCC_OscConfig+0x538>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d030      	beq.n	8002af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d129      	bne.n	8002af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d122      	bne.n	8002af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002abe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d119      	bne.n	8002af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d10f      	bne.n	8002af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800

08002b0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e03f      	b.n	8002b9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe f9de 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2224      	movs	r2, #36	; 0x24
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f829 	bl	8002ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bac:	b0c0      	sub	sp, #256	; 0x100
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	68d9      	ldr	r1, [r3, #12]
 8002bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	ea40 0301 	orr.w	r3, r0, r1
 8002bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c00:	f021 010c 	bic.w	r1, r1, #12
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c22:	6999      	ldr	r1, [r3, #24]
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	ea40 0301 	orr.w	r3, r0, r1
 8002c2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b8f      	ldr	r3, [pc, #572]	; (8002e74 <UART_SetConfig+0x2cc>)
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d005      	beq.n	8002c48 <UART_SetConfig+0xa0>
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4b8d      	ldr	r3, [pc, #564]	; (8002e78 <UART_SetConfig+0x2d0>)
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d104      	bne.n	8002c52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c48:	f7ff fa7e 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8002c4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c50:	e003      	b.n	8002c5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c52:	f7ff fa65 	bl	8002120 <HAL_RCC_GetPCLK1Freq>
 8002c56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c64:	f040 810c 	bne.w	8002e80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	462b      	mov	r3, r5
 8002c7e:	1891      	adds	r1, r2, r2
 8002c80:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c82:	415b      	adcs	r3, r3
 8002c84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	eb12 0801 	adds.w	r8, r2, r1
 8002c90:	4629      	mov	r1, r5
 8002c92:	eb43 0901 	adc.w	r9, r3, r1
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002caa:	4690      	mov	r8, r2
 8002cac:	4699      	mov	r9, r3
 8002cae:	4623      	mov	r3, r4
 8002cb0:	eb18 0303 	adds.w	r3, r8, r3
 8002cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cb8:	462b      	mov	r3, r5
 8002cba:	eb49 0303 	adc.w	r3, r9, r3
 8002cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	18db      	adds	r3, r3, r3
 8002cda:	653b      	str	r3, [r7, #80]	; 0x50
 8002cdc:	4613      	mov	r3, r2
 8002cde:	eb42 0303 	adc.w	r3, r2, r3
 8002ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ce4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ce8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002cec:	f7fd fa8a 	bl	8000204 <__aeabi_uldivmod>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4b61      	ldr	r3, [pc, #388]	; (8002e7c <UART_SetConfig+0x2d4>)
 8002cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	011c      	lsls	r4, r3, #4
 8002cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d10:	4642      	mov	r2, r8
 8002d12:	464b      	mov	r3, r9
 8002d14:	1891      	adds	r1, r2, r2
 8002d16:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d18:	415b      	adcs	r3, r3
 8002d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d20:	4641      	mov	r1, r8
 8002d22:	eb12 0a01 	adds.w	sl, r2, r1
 8002d26:	4649      	mov	r1, r9
 8002d28:	eb43 0b01 	adc.w	fp, r3, r1
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d40:	4692      	mov	sl, r2
 8002d42:	469b      	mov	fp, r3
 8002d44:	4643      	mov	r3, r8
 8002d46:	eb1a 0303 	adds.w	r3, sl, r3
 8002d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d4e:	464b      	mov	r3, r9
 8002d50:	eb4b 0303 	adc.w	r3, fp, r3
 8002d54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	18db      	adds	r3, r3, r3
 8002d70:	643b      	str	r3, [r7, #64]	; 0x40
 8002d72:	4613      	mov	r3, r2
 8002d74:	eb42 0303 	adc.w	r3, r2, r3
 8002d78:	647b      	str	r3, [r7, #68]	; 0x44
 8002d7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d82:	f7fd fa3f 	bl	8000204 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4b3b      	ldr	r3, [pc, #236]	; (8002e7c <UART_SetConfig+0x2d4>)
 8002d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2264      	movs	r2, #100	; 0x64
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	1acb      	subs	r3, r1, r3
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <UART_SetConfig+0x2d4>)
 8002da4:	fba3 2302 	umull	r2, r3, r3, r2
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002db0:	441c      	add	r4, r3
 8002db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002dc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002dc4:	4642      	mov	r2, r8
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	1891      	adds	r1, r2, r2
 8002dca:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dcc:	415b      	adcs	r3, r3
 8002dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	1851      	adds	r1, r2, r1
 8002dd8:	6339      	str	r1, [r7, #48]	; 0x30
 8002dda:	4649      	mov	r1, r9
 8002ddc:	414b      	adcs	r3, r1
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002dec:	4659      	mov	r1, fp
 8002dee:	00cb      	lsls	r3, r1, #3
 8002df0:	4651      	mov	r1, sl
 8002df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002df6:	4651      	mov	r1, sl
 8002df8:	00ca      	lsls	r2, r1, #3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4642      	mov	r2, r8
 8002e02:	189b      	adds	r3, r3, r2
 8002e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e08:	464b      	mov	r3, r9
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	eb42 0303 	adc.w	r3, r2, r3
 8002e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e28:	460b      	mov	r3, r1
 8002e2a:	18db      	adds	r3, r3, r3
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e2e:	4613      	mov	r3, r2
 8002e30:	eb42 0303 	adc.w	r3, r2, r3
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e3e:	f7fd f9e1 	bl	8000204 <__aeabi_uldivmod>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <UART_SetConfig+0x2d4>)
 8002e48:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	2164      	movs	r1, #100	; 0x64
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	3332      	adds	r3, #50	; 0x32
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <UART_SetConfig+0x2d4>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	f003 0207 	and.w	r2, r3, #7
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4422      	add	r2, r4
 8002e6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e70:	e106      	b.n	8003080 <UART_SetConfig+0x4d8>
 8002e72:	bf00      	nop
 8002e74:	40011000 	.word	0x40011000
 8002e78:	40011400 	.word	0x40011400
 8002e7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e92:	4642      	mov	r2, r8
 8002e94:	464b      	mov	r3, r9
 8002e96:	1891      	adds	r1, r2, r2
 8002e98:	6239      	str	r1, [r7, #32]
 8002e9a:	415b      	adcs	r3, r3
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ea2:	4641      	mov	r1, r8
 8002ea4:	1854      	adds	r4, r2, r1
 8002ea6:	4649      	mov	r1, r9
 8002ea8:	eb43 0501 	adc.w	r5, r3, r1
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	00eb      	lsls	r3, r5, #3
 8002eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eba:	00e2      	lsls	r2, r4, #3
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	461d      	mov	r5, r3
 8002ec0:	4643      	mov	r3, r8
 8002ec2:	18e3      	adds	r3, r4, r3
 8002ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ec8:	464b      	mov	r3, r9
 8002eca:	eb45 0303 	adc.w	r3, r5, r3
 8002ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ede:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002eee:	4629      	mov	r1, r5
 8002ef0:	008b      	lsls	r3, r1, #2
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef8:	4621      	mov	r1, r4
 8002efa:	008a      	lsls	r2, r1, #2
 8002efc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f00:	f7fd f980 	bl	8000204 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4b60      	ldr	r3, [pc, #384]	; (800308c <UART_SetConfig+0x4e4>)
 8002f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	011c      	lsls	r4, r3, #4
 8002f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f24:	4642      	mov	r2, r8
 8002f26:	464b      	mov	r3, r9
 8002f28:	1891      	adds	r1, r2, r2
 8002f2a:	61b9      	str	r1, [r7, #24]
 8002f2c:	415b      	adcs	r3, r3
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f34:	4641      	mov	r1, r8
 8002f36:	1851      	adds	r1, r2, r1
 8002f38:	6139      	str	r1, [r7, #16]
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	414b      	adcs	r3, r1
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	00cb      	lsls	r3, r1, #3
 8002f50:	4651      	mov	r1, sl
 8002f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f56:	4651      	mov	r1, sl
 8002f58:	00ca      	lsls	r2, r1, #3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4642      	mov	r2, r8
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f68:	464b      	mov	r3, r9
 8002f6a:	460a      	mov	r2, r1
 8002f6c:	eb42 0303 	adc.w	r3, r2, r3
 8002f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	008b      	lsls	r3, r1, #2
 8002f90:	4641      	mov	r1, r8
 8002f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f96:	4641      	mov	r1, r8
 8002f98:	008a      	lsls	r2, r1, #2
 8002f9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f9e:	f7fd f931 	bl	8000204 <__aeabi_uldivmod>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4b38      	ldr	r3, [pc, #224]	; (800308c <UART_SetConfig+0x4e4>)
 8002faa:	fba3 2301 	umull	r2, r3, r3, r1
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2264      	movs	r2, #100	; 0x64
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	1acb      	subs	r3, r1, r3
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	3332      	adds	r3, #50	; 0x32
 8002fbc:	4a33      	ldr	r2, [pc, #204]	; (800308c <UART_SetConfig+0x4e4>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc8:	441c      	add	r4, r3
 8002fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fce:	2200      	movs	r2, #0
 8002fd0:	673b      	str	r3, [r7, #112]	; 0x70
 8002fd2:	677a      	str	r2, [r7, #116]	; 0x74
 8002fd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002fd8:	4642      	mov	r2, r8
 8002fda:	464b      	mov	r3, r9
 8002fdc:	1891      	adds	r1, r2, r2
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	415b      	adcs	r3, r3
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe8:	4641      	mov	r1, r8
 8002fea:	1851      	adds	r1, r2, r1
 8002fec:	6039      	str	r1, [r7, #0]
 8002fee:	4649      	mov	r1, r9
 8002ff0:	414b      	adcs	r3, r1
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003000:	4659      	mov	r1, fp
 8003002:	00cb      	lsls	r3, r1, #3
 8003004:	4651      	mov	r1, sl
 8003006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800300a:	4651      	mov	r1, sl
 800300c:	00ca      	lsls	r2, r1, #3
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	4603      	mov	r3, r0
 8003014:	4642      	mov	r2, r8
 8003016:	189b      	adds	r3, r3, r2
 8003018:	66bb      	str	r3, [r7, #104]	; 0x68
 800301a:	464b      	mov	r3, r9
 800301c:	460a      	mov	r2, r1
 800301e:	eb42 0303 	adc.w	r3, r2, r3
 8003022:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	663b      	str	r3, [r7, #96]	; 0x60
 800302e:	667a      	str	r2, [r7, #100]	; 0x64
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800303c:	4649      	mov	r1, r9
 800303e:	008b      	lsls	r3, r1, #2
 8003040:	4641      	mov	r1, r8
 8003042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003046:	4641      	mov	r1, r8
 8003048:	008a      	lsls	r2, r1, #2
 800304a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800304e:	f7fd f8d9 	bl	8000204 <__aeabi_uldivmod>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4b0d      	ldr	r3, [pc, #52]	; (800308c <UART_SetConfig+0x4e4>)
 8003058:	fba3 1302 	umull	r1, r3, r3, r2
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	2164      	movs	r1, #100	; 0x64
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	3332      	adds	r3, #50	; 0x32
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <UART_SetConfig+0x4e4>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	f003 020f 	and.w	r2, r3, #15
 8003076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4422      	add	r2, r4
 800307e:	609a      	str	r2, [r3, #8]
}
 8003080:	bf00      	nop
 8003082:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003086:	46bd      	mov	sp, r7
 8003088:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308c:	51eb851f 	.word	0x51eb851f

08003090 <__itoa>:
 8003090:	1e93      	subs	r3, r2, #2
 8003092:	2b22      	cmp	r3, #34	; 0x22
 8003094:	b510      	push	{r4, lr}
 8003096:	460c      	mov	r4, r1
 8003098:	d904      	bls.n	80030a4 <__itoa+0x14>
 800309a:	2300      	movs	r3, #0
 800309c:	700b      	strb	r3, [r1, #0]
 800309e:	461c      	mov	r4, r3
 80030a0:	4620      	mov	r0, r4
 80030a2:	bd10      	pop	{r4, pc}
 80030a4:	2a0a      	cmp	r2, #10
 80030a6:	d109      	bne.n	80030bc <__itoa+0x2c>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	da07      	bge.n	80030bc <__itoa+0x2c>
 80030ac:	232d      	movs	r3, #45	; 0x2d
 80030ae:	700b      	strb	r3, [r1, #0]
 80030b0:	4240      	negs	r0, r0
 80030b2:	2101      	movs	r1, #1
 80030b4:	4421      	add	r1, r4
 80030b6:	f000 f805 	bl	80030c4 <__utoa>
 80030ba:	e7f1      	b.n	80030a0 <__itoa+0x10>
 80030bc:	2100      	movs	r1, #0
 80030be:	e7f9      	b.n	80030b4 <__itoa+0x24>

080030c0 <itoa>:
 80030c0:	f7ff bfe6 	b.w	8003090 <__itoa>

080030c4 <__utoa>:
 80030c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c6:	4c1f      	ldr	r4, [pc, #124]	; (8003144 <__utoa+0x80>)
 80030c8:	b08b      	sub	sp, #44	; 0x2c
 80030ca:	4605      	mov	r5, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	466e      	mov	r6, sp
 80030d0:	f104 0c20 	add.w	ip, r4, #32
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	6861      	ldr	r1, [r4, #4]
 80030d8:	4637      	mov	r7, r6
 80030da:	c703      	stmia	r7!, {r0, r1}
 80030dc:	3408      	adds	r4, #8
 80030de:	4564      	cmp	r4, ip
 80030e0:	463e      	mov	r6, r7
 80030e2:	d1f7      	bne.n	80030d4 <__utoa+0x10>
 80030e4:	7921      	ldrb	r1, [r4, #4]
 80030e6:	7139      	strb	r1, [r7, #4]
 80030e8:	1e91      	subs	r1, r2, #2
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	6038      	str	r0, [r7, #0]
 80030ee:	2922      	cmp	r1, #34	; 0x22
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	d904      	bls.n	8003100 <__utoa+0x3c>
 80030f6:	7019      	strb	r1, [r3, #0]
 80030f8:	460b      	mov	r3, r1
 80030fa:	4618      	mov	r0, r3
 80030fc:	b00b      	add	sp, #44	; 0x2c
 80030fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003100:	1e58      	subs	r0, r3, #1
 8003102:	4684      	mov	ip, r0
 8003104:	fbb5 f7f2 	udiv	r7, r5, r2
 8003108:	fb02 5617 	mls	r6, r2, r7, r5
 800310c:	3628      	adds	r6, #40	; 0x28
 800310e:	446e      	add	r6, sp
 8003110:	460c      	mov	r4, r1
 8003112:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003116:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800311a:	462e      	mov	r6, r5
 800311c:	42b2      	cmp	r2, r6
 800311e:	f101 0101 	add.w	r1, r1, #1
 8003122:	463d      	mov	r5, r7
 8003124:	d9ee      	bls.n	8003104 <__utoa+0x40>
 8003126:	2200      	movs	r2, #0
 8003128:	545a      	strb	r2, [r3, r1]
 800312a:	1919      	adds	r1, r3, r4
 800312c:	1aa5      	subs	r5, r4, r2
 800312e:	42aa      	cmp	r2, r5
 8003130:	dae3      	bge.n	80030fa <__utoa+0x36>
 8003132:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003136:	780e      	ldrb	r6, [r1, #0]
 8003138:	7006      	strb	r6, [r0, #0]
 800313a:	3201      	adds	r2, #1
 800313c:	f801 5901 	strb.w	r5, [r1], #-1
 8003140:	e7f4      	b.n	800312c <__utoa+0x68>
 8003142:	bf00      	nop
 8003144:	08003250 	.word	0x08003250

08003148 <memset>:
 8003148:	4402      	add	r2, r0
 800314a:	4603      	mov	r3, r0
 800314c:	4293      	cmp	r3, r2
 800314e:	d100      	bne.n	8003152 <memset+0xa>
 8003150:	4770      	bx	lr
 8003152:	f803 1b01 	strb.w	r1, [r3], #1
 8003156:	e7f9      	b.n	800314c <memset+0x4>

08003158 <__libc_init_array>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	4d0d      	ldr	r5, [pc, #52]	; (8003190 <__libc_init_array+0x38>)
 800315c:	4c0d      	ldr	r4, [pc, #52]	; (8003194 <__libc_init_array+0x3c>)
 800315e:	1b64      	subs	r4, r4, r5
 8003160:	10a4      	asrs	r4, r4, #2
 8003162:	2600      	movs	r6, #0
 8003164:	42a6      	cmp	r6, r4
 8003166:	d109      	bne.n	800317c <__libc_init_array+0x24>
 8003168:	4d0b      	ldr	r5, [pc, #44]	; (8003198 <__libc_init_array+0x40>)
 800316a:	4c0c      	ldr	r4, [pc, #48]	; (800319c <__libc_init_array+0x44>)
 800316c:	f000 f818 	bl	80031a0 <_init>
 8003170:	1b64      	subs	r4, r4, r5
 8003172:	10a4      	asrs	r4, r4, #2
 8003174:	2600      	movs	r6, #0
 8003176:	42a6      	cmp	r6, r4
 8003178:	d105      	bne.n	8003186 <__libc_init_array+0x2e>
 800317a:	bd70      	pop	{r4, r5, r6, pc}
 800317c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003180:	4798      	blx	r3
 8003182:	3601      	adds	r6, #1
 8003184:	e7ee      	b.n	8003164 <__libc_init_array+0xc>
 8003186:	f855 3b04 	ldr.w	r3, [r5], #4
 800318a:	4798      	blx	r3
 800318c:	3601      	adds	r6, #1
 800318e:	e7f2      	b.n	8003176 <__libc_init_array+0x1e>
 8003190:	08003280 	.word	0x08003280
 8003194:	08003280 	.word	0x08003280
 8003198:	08003280 	.word	0x08003280
 800319c:	08003284 	.word	0x08003284

080031a0 <_init>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr

080031ac <_fini>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	bf00      	nop
 80031b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b2:	bc08      	pop	{r3}
 80031b4:	469e      	mov	lr, r3
 80031b6:	4770      	bx	lr
